// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Test_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Test_2eproto;
namespace HiProtobuf {
class Excel_Test;
class Excel_TestDefaultTypeInternal;
extern Excel_TestDefaultTypeInternal _Excel_Test_default_instance_;
class Excel_Test_DataEntry_DoNotUse;
class Excel_Test_DataEntry_DoNotUseDefaultTypeInternal;
extern Excel_Test_DataEntry_DoNotUseDefaultTypeInternal _Excel_Test_DataEntry_DoNotUse_default_instance_;
class Test;
class TestDefaultTypeInternal;
extern TestDefaultTypeInternal _Test_default_instance_;
}  // namespace HiProtobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::HiProtobuf::Excel_Test* Arena::CreateMaybeMessage<::HiProtobuf::Excel_Test>(Arena*);
template<> ::HiProtobuf::Excel_Test_DataEntry_DoNotUse* Arena::CreateMaybeMessage<::HiProtobuf::Excel_Test_DataEntry_DoNotUse>(Arena*);
template<> ::HiProtobuf::Test* Arena::CreateMaybeMessage<::HiProtobuf::Test>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace HiProtobuf {

// ===================================================================

class Test :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HiProtobuf.Test) */ {
 public:
  Test();
  virtual ~Test();

  Test(const Test& from);
  Test(Test&& from) noexcept
    : Test() {
    *this = ::std::move(from);
  }

  inline Test& operator=(const Test& from) {
    CopyFrom(from);
    return *this;
  }
  inline Test& operator=(Test&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Test& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Test* internal_default_instance() {
    return reinterpret_cast<const Test*>(
               &_Test_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Test* other);
  friend void swap(Test& a, Test& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Test* New() const final {
    return CreateMaybeMessage<Test>(nullptr);
  }

  Test* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Test>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Test& from);
  void MergeFrom(const Test& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Test* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HiProtobuf.Test";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Test_2eproto);
    return ::descriptor_table_Test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string infos = 5;
  int infos_size() const;
  void clear_infos();
  static const int kInfosFieldNumber = 5;
  const std::string& infos(int index) const;
  std::string* mutable_infos(int index);
  void set_infos(int index, const std::string& value);
  void set_infos(int index, std::string&& value);
  void set_infos(int index, const char* value);
  void set_infos(int index, const char* value, size_t size);
  std::string* add_infos();
  void add_infos(const std::string& value);
  void add_infos(std::string&& value);
  void add_infos(const char* value);
  void add_infos(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& infos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_infos();

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 hp = 3;
  void clear_hp();
  static const int kHpFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 attack = 4;
  void clear_attack();
  static const int kAttackFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 attack() const;
  void set_attack(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:HiProtobuf.Test)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> infos_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 hp_;
  ::PROTOBUF_NAMESPACE_ID::int32 attack_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Test_2eproto;
};
// -------------------------------------------------------------------

class Excel_Test_DataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Excel_Test_DataEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::HiProtobuf::Test,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Excel_Test_DataEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::HiProtobuf::Test,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Excel_Test_DataEntry_DoNotUse();
  Excel_Test_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Excel_Test_DataEntry_DoNotUse& other);
  static const Excel_Test_DataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Excel_Test_DataEntry_DoNotUse*>(&_Excel_Test_DataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Test_2eproto);
    return ::descriptor_table_Test_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class Excel_Test :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HiProtobuf.Excel_Test) */ {
 public:
  Excel_Test();
  virtual ~Excel_Test();

  Excel_Test(const Excel_Test& from);
  Excel_Test(Excel_Test&& from) noexcept
    : Excel_Test() {
    *this = ::std::move(from);
  }

  inline Excel_Test& operator=(const Excel_Test& from) {
    CopyFrom(from);
    return *this;
  }
  inline Excel_Test& operator=(Excel_Test&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Excel_Test& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Excel_Test* internal_default_instance() {
    return reinterpret_cast<const Excel_Test*>(
               &_Excel_Test_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Excel_Test* other);
  friend void swap(Excel_Test& a, Excel_Test& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Excel_Test* New() const final {
    return CreateMaybeMessage<Excel_Test>(nullptr);
  }

  Excel_Test* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Excel_Test>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Excel_Test& from);
  void MergeFrom(const Excel_Test& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Excel_Test* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HiProtobuf.Excel_Test";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Test_2eproto);
    return ::descriptor_table_Test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<int32, .HiProtobuf.Test> Data = 1;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::HiProtobuf::Test >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::HiProtobuf::Test >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:HiProtobuf.Excel_Test)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Excel_Test_DataEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::HiProtobuf::Test,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Test_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Test

// int32 id = 1;
inline void Test::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Test::id() const {
  // @@protoc_insertion_point(field_get:HiProtobuf.Test.id)
  return id_;
}
inline void Test::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:HiProtobuf.Test.id)
}

// string name = 2;
inline void Test::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Test::name() const {
  // @@protoc_insertion_point(field_get:HiProtobuf.Test.name)
  return name_.GetNoArena();
}
inline void Test::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HiProtobuf.Test.name)
}
inline void Test::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HiProtobuf.Test.name)
}
inline void Test::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HiProtobuf.Test.name)
}
inline void Test::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HiProtobuf.Test.name)
}
inline std::string* Test::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:HiProtobuf.Test.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Test::release_name() {
  // @@protoc_insertion_point(field_release:HiProtobuf.Test.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Test::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:HiProtobuf.Test.name)
}

// int32 hp = 3;
inline void Test::clear_hp() {
  hp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Test::hp() const {
  // @@protoc_insertion_point(field_get:HiProtobuf.Test.hp)
  return hp_;
}
inline void Test::set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hp_ = value;
  // @@protoc_insertion_point(field_set:HiProtobuf.Test.hp)
}

// int32 attack = 4;
inline void Test::clear_attack() {
  attack_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Test::attack() const {
  // @@protoc_insertion_point(field_get:HiProtobuf.Test.attack)
  return attack_;
}
inline void Test::set_attack(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  attack_ = value;
  // @@protoc_insertion_point(field_set:HiProtobuf.Test.attack)
}

// repeated string infos = 5;
inline int Test::infos_size() const {
  return infos_.size();
}
inline void Test::clear_infos() {
  infos_.Clear();
}
inline const std::string& Test::infos(int index) const {
  // @@protoc_insertion_point(field_get:HiProtobuf.Test.infos)
  return infos_.Get(index);
}
inline std::string* Test::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:HiProtobuf.Test.infos)
  return infos_.Mutable(index);
}
inline void Test::set_infos(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:HiProtobuf.Test.infos)
  infos_.Mutable(index)->assign(value);
}
inline void Test::set_infos(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:HiProtobuf.Test.infos)
  infos_.Mutable(index)->assign(std::move(value));
}
inline void Test::set_infos(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  infos_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:HiProtobuf.Test.infos)
}
inline void Test::set_infos(int index, const char* value, size_t size) {
  infos_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:HiProtobuf.Test.infos)
}
inline std::string* Test::add_infos() {
  // @@protoc_insertion_point(field_add_mutable:HiProtobuf.Test.infos)
  return infos_.Add();
}
inline void Test::add_infos(const std::string& value) {
  infos_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:HiProtobuf.Test.infos)
}
inline void Test::add_infos(std::string&& value) {
  infos_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:HiProtobuf.Test.infos)
}
inline void Test::add_infos(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  infos_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:HiProtobuf.Test.infos)
}
inline void Test::add_infos(const char* value, size_t size) {
  infos_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:HiProtobuf.Test.infos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Test::infos() const {
  // @@protoc_insertion_point(field_list:HiProtobuf.Test.infos)
  return infos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Test::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:HiProtobuf.Test.infos)
  return &infos_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Excel_Test

// map<int32, .HiProtobuf.Test> Data = 1;
inline int Excel_Test::data_size() const {
  return data_.size();
}
inline void Excel_Test::clear_data() {
  data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::HiProtobuf::Test >&
Excel_Test::data() const {
  // @@protoc_insertion_point(field_map:HiProtobuf.Excel_Test.Data)
  return data_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::HiProtobuf::Test >*
Excel_Test::mutable_data() {
  // @@protoc_insertion_point(field_mutable_map:HiProtobuf.Excel_Test.Data)
  return data_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace HiProtobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Test_2eproto
